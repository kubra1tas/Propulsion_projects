{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ML exercise: pirate attacks\n",
    "\n",
    "- train KNN\n",
    "- train Naive Bayes\n",
    "- train SVM\n",
    "\n",
    "- predict outcome comparing 3 models\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sklearn.model_selection as skms \n",
    "import sklearn.preprocessing as skpp\n",
    "\n",
    "from sklearn import linear_model as lm\n",
    "from sklearn.metrics import mean_squared_error, r2_score, roc_auc_score, balanced_accuracy_score, roc_curve\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>DATETIME (LOCAL)</th>\n",
       "      <th>DATETIME (UTC)</th>\n",
       "      <th>DATE (LT)</th>\n",
       "      <th>DATE (UTC)</th>\n",
       "      <th>REGION</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>INCIDENT TYPE</th>\n",
       "      <th>VESSEL TYPE</th>\n",
       "      <th>MAERSK?</th>\n",
       "      <th>VESSEL ACTIVITY LOCATION</th>\n",
       "      <th>LAT</th>\n",
       "      <th>LONG</th>\n",
       "      <th>TIMEZONE</th>\n",
       "      <th>TIME OF DAY</th>\n",
       "      <th>ATTACKS</th>\n",
       "      <th>ATTACK SUCCESS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-01-30 23:34:00</td>\n",
       "      <td>2016-01-30 22:34:00</td>\n",
       "      <td>2016-01-30</td>\n",
       "      <td>2016-01-30</td>\n",
       "      <td>WEST AFRICA</td>\n",
       "      <td>NIGERIA</td>\n",
       "      <td>FAILED ATTACK, HIJACKING</td>\n",
       "      <td>CONTAINER SHIP</td>\n",
       "      <td>0</td>\n",
       "      <td>OFF SHORE</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.250000</td>\n",
       "      <td>Africa/Lagos</td>\n",
       "      <td>EVENING</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2016-01-29 23:40:00</td>\n",
       "      <td>2016-01-29 22:40:00</td>\n",
       "      <td>2016-01-29</td>\n",
       "      <td>2016-01-29</td>\n",
       "      <td>WEST AFRICA</td>\n",
       "      <td>NIGERIA</td>\n",
       "      <td>KIDNAP/RANSOM AT SEA</td>\n",
       "      <td>PRODUCT TANKER</td>\n",
       "      <td>0</td>\n",
       "      <td>OFF SHORE</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>5.750000</td>\n",
       "      <td>Africa/Lagos</td>\n",
       "      <td>EVENING</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2016-01-28 03:00:00</td>\n",
       "      <td>2016-01-28 02:00:00</td>\n",
       "      <td>2016-01-28</td>\n",
       "      <td>2016-01-28</td>\n",
       "      <td>SOUTH ASIA</td>\n",
       "      <td>INDIA</td>\n",
       "      <td>FAILED ATTACK, ROBBERY</td>\n",
       "      <td>PRODUCT TANKER</td>\n",
       "      <td>0</td>\n",
       "      <td>ANCHORAGE</td>\n",
       "      <td>22.816667</td>\n",
       "      <td>70.116667</td>\n",
       "      <td>Asia/Kolkata</td>\n",
       "      <td>NIGHT</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2016-01-27</td>\n",
       "      <td>2016-01-27</td>\n",
       "      <td>HORN OF AFRICA/ GULF OF ADEN</td>\n",
       "      <td>SOMALIA</td>\n",
       "      <td>SUSPICIOUS ACTIVITY AT SEA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>OFF SHORE</td>\n",
       "      <td>13.998747</td>\n",
       "      <td>54.112792</td>\n",
       "      <td>Asia/Riyadh</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2016-01-25 23:55:00</td>\n",
       "      <td>2016-01-25 22:55:00</td>\n",
       "      <td>2016-01-25</td>\n",
       "      <td>2016-01-25</td>\n",
       "      <td>SOUTH AMERICA</td>\n",
       "      <td>VENEZUELA</td>\n",
       "      <td>THEFT AT ANCHORAGE</td>\n",
       "      <td>GENERAL CARGO VESSEL</td>\n",
       "      <td>0</td>\n",
       "      <td>ANCHORAGE</td>\n",
       "      <td>10.267500</td>\n",
       "      <td>-63.432500</td>\n",
       "      <td>America/Caracas</td>\n",
       "      <td>EVENING</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0     DATETIME (LOCAL)       DATETIME (UTC)   DATE (LT)  \\\n",
       "0           1  2016-01-30 23:34:00  2016-01-30 22:34:00  2016-01-30   \n",
       "1           2  2016-01-29 23:40:00  2016-01-29 22:40:00  2016-01-29   \n",
       "2           3  2016-01-28 03:00:00  2016-01-28 02:00:00  2016-01-28   \n",
       "3           4                  NaN                  NaN  2016-01-27   \n",
       "4           5  2016-01-25 23:55:00  2016-01-25 22:55:00  2016-01-25   \n",
       "\n",
       "   DATE (UTC)                        REGION    COUNTRY  \\\n",
       "0  2016-01-30                   WEST AFRICA    NIGERIA   \n",
       "1  2016-01-29                   WEST AFRICA    NIGERIA   \n",
       "2  2016-01-28                    SOUTH ASIA      INDIA   \n",
       "3  2016-01-27  HORN OF AFRICA/ GULF OF ADEN    SOMALIA   \n",
       "4  2016-01-25                 SOUTH AMERICA  VENEZUELA   \n",
       "\n",
       "                INCIDENT TYPE           VESSEL TYPE  MAERSK?  \\\n",
       "0    FAILED ATTACK, HIJACKING        CONTAINER SHIP        0   \n",
       "1        KIDNAP/RANSOM AT SEA        PRODUCT TANKER        0   \n",
       "2      FAILED ATTACK, ROBBERY        PRODUCT TANKER        0   \n",
       "3  SUSPICIOUS ACTIVITY AT SEA                   NaN        0   \n",
       "4          THEFT AT ANCHORAGE  GENERAL CARGO VESSEL        0   \n",
       "\n",
       "  VESSEL ACTIVITY LOCATION        LAT       LONG         TIMEZONE TIME OF DAY  \\\n",
       "0                OFF SHORE   3.000000   6.250000     Africa/Lagos     EVENING   \n",
       "1                OFF SHORE   2.500000   5.750000     Africa/Lagos     EVENING   \n",
       "2                ANCHORAGE  22.816667  70.116667     Asia/Kolkata       NIGHT   \n",
       "3                OFF SHORE  13.998747  54.112792      Asia/Riyadh     UNKNOWN   \n",
       "4                ANCHORAGE  10.267500 -63.432500  America/Caracas     EVENING   \n",
       "\n",
       "   ATTACKS  ATTACK SUCCESS  \n",
       "0        1               0  \n",
       "1        1               1  \n",
       "2        1               0  \n",
       "3        1               0  \n",
       "4        1               1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data = pd.read_csv('/Users/iMotz/Propulsion/Machine_learning/data_sets/pirate_data.csv')\n",
    "raw_data = pd.DataFrame(raw_data)\n",
    "raw_data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 802 entries, 0 to 801\n",
      "Data columns (total 17 columns):\n",
      "Unnamed: 0                  802 non-null int64\n",
      "DATETIME (LOCAL)            582 non-null object\n",
      "DATETIME (UTC)              582 non-null object\n",
      "DATE (LT)                   802 non-null object\n",
      "DATE (UTC)                  802 non-null object\n",
      "REGION                      802 non-null object\n",
      "COUNTRY                     802 non-null object\n",
      "INCIDENT TYPE               802 non-null object\n",
      "VESSEL TYPE                 638 non-null object\n",
      "MAERSK?                     802 non-null int64\n",
      "VESSEL ACTIVITY LOCATION    676 non-null object\n",
      "LAT                         802 non-null float64\n",
      "LONG                        802 non-null float64\n",
      "TIMEZONE                    802 non-null object\n",
      "TIME OF DAY                 802 non-null object\n",
      "ATTACKS                     802 non-null int64\n",
      "ATTACK SUCCESS              802 non-null int64\n",
      "dtypes: float64(2), int64(4), object(11)\n",
      "memory usage: 106.6+ KB\n"
     ]
    }
   ],
   "source": [
    "# check types and whether there are nans\n",
    "raw_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - check nans, remove or replace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 802 entries, 0 to 801\n",
      "Data columns (total 17 columns):\n",
      "Unnamed: 0                  802 non-null int64\n",
      "DATETIME (LOCAL)            802 non-null object\n",
      "DATETIME (UTC)              802 non-null object\n",
      "DATE (LT)                   802 non-null object\n",
      "DATE (UTC)                  802 non-null object\n",
      "REGION                      802 non-null object\n",
      "COUNTRY                     802 non-null object\n",
      "INCIDENT TYPE               802 non-null object\n",
      "VESSEL TYPE                 802 non-null object\n",
      "MAERSK?                     802 non-null int64\n",
      "VESSEL ACTIVITY LOCATION    802 non-null object\n",
      "LAT                         802 non-null float64\n",
      "LONG                        802 non-null float64\n",
      "TIMEZONE                    802 non-null object\n",
      "TIME OF DAY                 802 non-null object\n",
      "ATTACKS                     802 non-null int64\n",
      "ATTACK SUCCESS              802 non-null int64\n",
      "dtypes: float64(2), int64(4), object(11)\n",
      "memory usage: 106.6+ KB\n"
     ]
    }
   ],
   "source": [
    "raw_data = raw_data.fillna('UNKNOWN')\n",
    "raw_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### select meaningful features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REGION</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>VESSEL ACTIVITY LOCATION</th>\n",
       "      <th>LAT</th>\n",
       "      <th>LONG</th>\n",
       "      <th>TIME OF DAY</th>\n",
       "      <th>ATTACK SUCCESS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WEST AFRICA</td>\n",
       "      <td>NIGERIA</td>\n",
       "      <td>OFF SHORE</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.250000</td>\n",
       "      <td>EVENING</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WEST AFRICA</td>\n",
       "      <td>NIGERIA</td>\n",
       "      <td>OFF SHORE</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>5.750000</td>\n",
       "      <td>EVENING</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SOUTH ASIA</td>\n",
       "      <td>INDIA</td>\n",
       "      <td>ANCHORAGE</td>\n",
       "      <td>22.816667</td>\n",
       "      <td>70.116667</td>\n",
       "      <td>NIGHT</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>HORN OF AFRICA/ GULF OF ADEN</td>\n",
       "      <td>SOMALIA</td>\n",
       "      <td>OFF SHORE</td>\n",
       "      <td>13.998747</td>\n",
       "      <td>54.112792</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SOUTH AMERICA</td>\n",
       "      <td>VENEZUELA</td>\n",
       "      <td>ANCHORAGE</td>\n",
       "      <td>10.267500</td>\n",
       "      <td>-63.432500</td>\n",
       "      <td>EVENING</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         REGION    COUNTRY VESSEL ACTIVITY LOCATION  \\\n",
       "0                   WEST AFRICA    NIGERIA                OFF SHORE   \n",
       "1                   WEST AFRICA    NIGERIA                OFF SHORE   \n",
       "2                    SOUTH ASIA      INDIA                ANCHORAGE   \n",
       "3  HORN OF AFRICA/ GULF OF ADEN    SOMALIA                OFF SHORE   \n",
       "4                 SOUTH AMERICA  VENEZUELA                ANCHORAGE   \n",
       "\n",
       "         LAT       LONG TIME OF DAY  ATTACK SUCCESS  \n",
       "0   3.000000   6.250000     EVENING               0  \n",
       "1   2.500000   5.750000     EVENING               1  \n",
       "2  22.816667  70.116667       NIGHT               0  \n",
       "3  13.998747  54.112792     UNKNOWN               0  \n",
       "4  10.267500 -63.432500     EVENING               1  "
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = raw_data.drop(columns = ['Unnamed: 0','DATETIME (LOCAL)','VESSEL TYPE','TIMEZONE','MAERSK?',\n",
    "                                'DATETIME (UTC)','DATE (LT)','DATE (UTC)','INCIDENT TYPE','ATTACKS'])\n",
    "data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# check all cat features: how many categories? does it make sense to keep them?\n",
    "#data['VESSEL TYPE'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REGION</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>VESSEL ACTIVITY LOCATION</th>\n",
       "      <th>LAT</th>\n",
       "      <th>LONG</th>\n",
       "      <th>TIME OF DAY</th>\n",
       "      <th>ATTACK SUCCESS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>WEST AFRICA</td>\n",
       "      <td>NIGERIA</td>\n",
       "      <td>OFF SHORE</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.250000</td>\n",
       "      <td>EVENING</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>WEST AFRICA</td>\n",
       "      <td>NIGERIA</td>\n",
       "      <td>OFF SHORE</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>5.750000</td>\n",
       "      <td>EVENING</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SOUTH ASIA</td>\n",
       "      <td>INDIA</td>\n",
       "      <td>ANCHORAGE</td>\n",
       "      <td>22.816667</td>\n",
       "      <td>70.116667</td>\n",
       "      <td>NIGHT</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>HORN OF AFRICA/ GULF OF ADEN</td>\n",
       "      <td>SOMALIA</td>\n",
       "      <td>OFF SHORE</td>\n",
       "      <td>13.998747</td>\n",
       "      <td>54.112792</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SOUTH AMERICA</td>\n",
       "      <td>VENEZUELA</td>\n",
       "      <td>ANCHORAGE</td>\n",
       "      <td>10.267500</td>\n",
       "      <td>-63.432500</td>\n",
       "      <td>EVENING</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         REGION    COUNTRY VESSEL ACTIVITY LOCATION  \\\n",
       "0                   WEST AFRICA    NIGERIA                OFF SHORE   \n",
       "1                   WEST AFRICA    NIGERIA                OFF SHORE   \n",
       "2                    SOUTH ASIA      INDIA                ANCHORAGE   \n",
       "3  HORN OF AFRICA/ GULF OF ADEN    SOMALIA                OFF SHORE   \n",
       "4                 SOUTH AMERICA  VENEZUELA                ANCHORAGE   \n",
       "\n",
       "         LAT       LONG TIME OF DAY  ATTACK SUCCESS  \n",
       "0   3.000000   6.250000     EVENING               0  \n",
       "1   2.500000   5.750000     EVENING               1  \n",
       "2  22.816667  70.116667       NIGHT               0  \n",
       "3  13.998747  54.112792     UNKNOWN               0  \n",
       "4  10.267500 -63.432500     EVENING               1  "
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - split data into test and train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_pred = data.drop(columns = ['ATTACK SUCCESS'])\n",
    "y = data['ATTACK SUCCESS']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 641 entries, 719 to 11\n",
      "Data columns (total 7 columns):\n",
      "REGION                      641 non-null object\n",
      "COUNTRY                     641 non-null object\n",
      "VESSEL TYPE                 641 non-null object\n",
      "VESSEL ACTIVITY LOCATION    641 non-null object\n",
      "LAT                         641 non-null float64\n",
      "LONG                        641 non-null float64\n",
      "TIME OF DAY                 641 non-null object\n",
      "dtypes: float64(2), object(5)\n",
      "memory usage: 40.1+ KB\n"
     ]
    }
   ],
   "source": [
    "X_train_raw, X_test_raw, y_train, y_test = skms.train_test_split(data_pred, y, test_size = 0.2)\n",
    "X_train_raw.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - transform categorical, rest can stay as it is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# training set\n",
    "X_train_raw_cat = X_train_raw.select_dtypes(['object'])\n",
    "X_test_raw_cat = X_test_raw.select_dtypes(['object'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import encoder object\n",
    "one_hot = skpp.OneHotEncoder(handle_unknown = 'ignore') # ! if you encounter a new cat in test set, ignore it\n",
    "\n",
    "# fit encoder to X train, transform\n",
    "X_train_cat = one_hot.fit_transform(X_train_raw_cat).toarray() # alt for specific cols: one_hot.fit(data[['col1', 'col2']])\n",
    "\n",
    "# transform X test (DO NOT FIT!)\n",
    "X_test_cat = one_hot.transform(X_test_raw_cat).toarray()\n",
    "\n",
    "# extract new col names:\n",
    "cat_col_names = one_hot.get_feature_names().tolist()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### here you could add numerical data, transform it and merge with df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert to data frame\n",
    "X_train = pd.DataFrame(columns = cat_col_names, data = X_train_cat)\n",
    "\n",
    "X_test = pd.DataFrame(columns = cat_col_names, data = X_test_cat)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### check if outcome is balanced!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(y_train)\n",
    "None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - train KNN\n",
    "\n",
    "read about StratifiedFold: it keeps the same outcome ratio (eg 70% pos, 30% neg) for cross validation batches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "# KNeighborsClassifier(n_neighbors=5, weights=’uniform’, algorithm=’auto’, \n",
    "#                      leaf_size=30, p=2, metric=’minkowski’, metric_params=None, n_jobs=None, **kwargs)\n",
    "\n",
    "# low number of n_neighbors => overfitting!, too high number => "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_roc_auc_knn = []\n",
    "\n",
    "range_nb = list(range(2,40))\n",
    "\n",
    "for i in range_nb:\n",
    "    curr_model = KNeighborsClassifier(n_neighbors = i,\n",
    "                     weights = 'distance',\n",
    "                     algorithm = 'auto' \n",
    "                    )\n",
    "     \n",
    "    mean_roc_auc_knn.append(np.mean(skms.cross_val_score(curr_model, \n",
    "                                                         X_train, y_train, cv = 6, scoring = 'roc_auc')))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range_nb, mean_roc_auc_knn)\n",
    "plt.xlabel('Number of neighbors')\n",
    "plt.ylabel('ROC AUC')\n",
    "None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - train Bernoulli Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "# BernoulliNB(alpha=1.0, binarize=0.0, fit_prior=True, class_prior=None)\n",
    "mean_roc_auc_bayes = []\n",
    "\n",
    "BB_alphas = [0.01, 0.1, 1, 10, 100]\n",
    "\n",
    "for i in BB_alphas:\n",
    "    curr_BB = BernoulliNB(alpha = i) \n",
    "    mean_roc_auc_bayes.append(np.mean(skms.cross_val_score(curr_BB, X_train, y_train, cv = 6, scoring = 'roc_auc')))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-17ac7a60c0f0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msemilogx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mBB_alphas\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmean_roc_auc_bayes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'alpha'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'ROC AUC'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "plt.semilogx(BB_alphas, mean_roc_auc_bayes)\n",
    "plt.xlabel('alpha')\n",
    "plt.ylabel('ROC AUC')\n",
    "None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### - train SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [],
   "source": [
    "# SVC(C=1.0, kernel=’rbf’, degree=3, \n",
    "#    gamma=’auto_deprecated’, coef0=0.0, shrinking=True, probability=False, \n",
    "#    tol=0.001, cache_size=200, class_weight=None, verbose=False, max_iter=-1, \n",
    "#    decision_function_shape=’ovr’, random_state=None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "C_range = np.linspace(0.001, 1, 50) # has to be positive\n",
    "\n",
    "mean_roc_auc_SVM = []\n",
    "\n",
    "for i in C_range:\n",
    "    curr_SVM = SVC(C = i, gamma='scale',probability=True) \n",
    "    mean_roc_auc_SVM.append(np.mean(skms.cross_val_score(curr_SVM, X_train, y_train, cv = 6, scoring = 'roc_auc')))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.semilogx(C_range, mean_roc_auc_SVM)\n",
    "plt.xlabel('C scores')\n",
    "plt.ylabel('ROC AUC')\n",
    "None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## And the winner is.....\n",
    "\n",
    "### SVM, C=0.02\n",
    "\n",
    "Let's finally predict X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [],
   "source": [
    "final_SVM = SVC(C = 0.02, gamma = 'scale', probability = True)\n",
    "final_SVM.fit(X_train,y_train)\n",
    "\n",
    "predicted_prob_y = final_SVM.predict_proba(X_test)\n",
    "predicted_y = final_SVM.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate true pos and false pos rate\n",
    "fpr_test, tpr_test, _ = roc_curve(y_test, predicted_prob_y[:,1])\n",
    "\n",
    "roc_df_test = pd.DataFrame({'fpr':fpr_test, 'tpr':tpr_test})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize'] = (8, 8)\n",
    "\n",
    "plt.plot(fpr_test, tpr_test, 'orange', linewidth=1)\n",
    "plt.plot([0, 1], [0, 1],'grey', linestyle = '--')\n",
    "plt.xlabel('False positive rate')\n",
    "plt.ylabel('True positive rate')\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.title('ROC curve (SVM)')\n",
    "None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6168316831683169"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_test, predicted_prob_y[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
